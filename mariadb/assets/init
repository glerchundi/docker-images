#!/bin/bash
set -eo pipefail

# start sshd server and add authorized keys
if [ ! -z "$SSH_AUTHORIZED_KEYS" ]; then
    echo "Starting sshd..."
    /usr/bin/supervisord 2> /dev/null
    supervisorctl start sshd
    ssh-authorized-keys $SSH_AUTHORIZED_KEYS
fi

wait_until_started () {
    timeout=120
    while ! mysqladmin -uroot status > /dev/null 2>&1
    do
        timeout=$(expr $timeout - 1)
        if [ $timeout -eq 0 ]; then
            echo "Failed to start mysql server"
            exit 1
        fi
        sleep 1
    done
}

appStart () {
    # fix permissions and ownership of /var/lib/mysql and /var/log/mysql
    chown -R mysql:mysql /var/lib/mysql /var/log/mysql
    chmod 700 /var/lib/mysql /var/log/mysql

    # initialize MySQL data directory
    if [ ! -d /var/lib/mysql/mysql ]; then
        mysql_install_db --user=mysql
    fi

    # start mysql server (in background)
    nohup /usr/bin/mysqld_safe > /dev/null 2>&1 &

    # wait until mysql is up and running
    wait_until_started

    # grant remote access from '172.17.%.%' address space to root user
    #echo "GRANT ALL ON *.* TO 'root'@'172.17.%.%' IDENTIFIED BY '' WITH GRANT OPTION;" | mysql -uroot
    #echo "FLUSH PRIVILEGES;" | mysql -uroot

    # tail and wait to new error log messages
    tail -F /var/log/mysql/mysql-error.log
}

appSecureInstallation () {
    # fix permissions and ownership of /var/lib/mysql
    chown -R mysql:mysql /var/lib/mysql
    chmod 700 /var/lib/mysql

    # initialize MySQL data directory
    if [ ! -d /var/lib/mysql/mysql ]; then
        mysql_install_db --user=mysql
    fi

    # start mysql server (in background)
    nohup /usr/bin/mysqld_safe > /dev/null 2>&1 &

    # wait until mysql is up and running
    wait_until_started

    # do secure install
    /usr/bin/mysql_secure_installation
}

appHelp () {
    echo "Available options:"
    echo " app:start                - Start the mariadb server and watch the log (default)"
    echo " app:secure_installation  - Harden server security"
    echo " app:help                 - Displays the help"
    echo " [command]                - Execute the specified linux command eg. bash."
}

case "$1" in
    app:start)
        appStart
        ;;
    app:secure_installation)
        appSecureInstallation
        ;;
    app:help)
        appHelp
        ;;
    *)
        if [ -x $1 ]; then
            $1
        else
            prog=$(which $1)
            if [ -n "${prog}" ] ; then
                shift 1
                $prog $@
            else
                appHelp
            fi
        fi
        ;;
esac

exit 0
