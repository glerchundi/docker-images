#!/bin/bash
set -e

# generate a password for root.
ROOT_PASSWORD=$(pwgen -c -n -1 12)
echo "root:$ROOT_PASSWORD" | chpasswd
echo User: root Password: $ROOT_PASSWORD

# start supervisord
/usr/bin/supervisord
supervisorctl start sshd

appStart () {
    # fix permissions and ownership of /var/lib/mysql
    chown -R mysql:mysql /var/lib/mysql
    chmod 700 /var/lib/mysql

    # initialize MySQL data directory
    if [ ! -d /var/lib/mysql/mysql ]; then
        mysql_install_db --user=mysql

        # start mysql server
        supervisorctl start mysqld

        # wait for mysql server to start (max 120 seconds)
        timeout=120
        while ! mysqladmin -uroot status >/dev/null 2>&1
        do
            timeout=$(expr $timeout - 1)
            if [ $timeout -eq 0 ]; then
                echo "Failed to start mysql server"
                exit 1
            fi
            sleep 1
        done

        # grant remote access from '172.17.%.%' address space to root user
        echo "GRANT ALL ON *.* TO 'root'@'172.17.%.%' IDENTIFIED BY '' WITH GRANT OPTION;" | mysql -uroot
        echo "FLUSH PRIVILEGES;" | mysql -uroot
    else
        supervisorctl start mysqld
    fi

    tail -F /var/log/mysql/error.log
}

appSecureInstallation () {
    # fix permissions and ownership of /var/lib/mysql
    chown -R mysql:mysql /var/lib/mysql
    chmod 700 /var/lib/mysql

    # initialize MySQL data directory
    if [ ! -d /var/lib/mysql/mysql ]; then
        mysql_install_db --user=mysql
    fi

    supervisorctl start mysqld

    /usr/bin/mysql_secure_installation
}

appHelp () {
    echo "Available options:"
    echo " app:start                - Start the mysql server and watch the log (default)"
    echo " app:secure_installation  - Harden server security"
    echo " app:help                 - Displays the help"
    echo " [command]                - Execute the specified linux command eg. bash."
}

case "$1" in
    app:start)
        appStart
        ;;
    app:secure_installation)
        appSecureInstallation
        ;;
    app:help)
        appHelp
        ;;
    *)
        if [ -x $1 ]; then
            $1
        else
            prog=$(which $1)
            if [ -n "${prog}" ] ; then
                shift 1
                $prog $@
            else
                appHelp
            fi
        fi
        ;;
esac

exit 0
